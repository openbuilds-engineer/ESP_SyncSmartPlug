<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="initial-scale=1, maximum-scale=1">
        <title>WebSockets test</title>
        <link rel="stylesheet" href="https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.8/jquery.jqplot.min.css" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/clockpicker/0.0.7/jquery-clockpicker.min.css" />
    	<style>
			/* Basic styles */
			.ui-body {
			    text-align: left;
			    border-color: #ddd;
			}
			p {
			    color: #777;
			    line-height: 140%
			}
			/* Stack all blocks to start */
			.ui-block-a,
			.ui-block-b,
			.ui-block-c {
			    width: 100%;
			    float: none;
			}
			/* Collapsing borders */
			.ui-body {
			    border-top-width: 0;
			}
			.smart-plug-sw .ui-slider-switch {
				width: 9em;
				height: 2em;
			}
			.override-sw .ui-slider-switch {
				width: 9em;
				height: 2em;
			}
			/* 1st breakpoint - Float B and C, leave A full width on top */
			@media all and (min-width: 42em) {
			    {
			        overflow: hidden; /* Use this or a "clearfix" to give the container height */
			    }
			    .ui-body {
			       min-height: 14em;
			    }
			    .ui-block-b,
			    .ui-block-c {
			      float: left;
			      width: 49.95%;
			    }
			    .ui-block-b p,
			    .ui-block-c p {
			      font-size: .8em;
			    }
			    .ui-body {
			        border-top-width: 1px;
			    }
			    .ui-body {
			        border-bottom-width: 0;
			    }
			    .ui-body {
			        border-left-width: 0;
			    }
			}
			/* 2nd breakpoint - Float all, 50/25/25 */
			@media all and (min-width: 55em) {
			    .ui-body {
			       min-height: 18em;
			    }
			    .ui-block-a,
			    .ui-block-c {
			      float: left;
			      width: 49.95%;
			    }
			    .ui-block-b,
			    .ui-block-c {
			      float: left;
			      width: 24.925%;
			    }
			    .ui-body {
			        border-bottom-width: 1px;
			    }
			    .ui-body {
			        border-left-width: 0;
			    }
			}
			/* 3rd breakpoint - Bump up font size at very wide screens */
			@media all and (min-width: 75em) {
			    .ui-body {
			      font-size: 125%;
			    }
			    .ui-block-a,
			    .ui-block-c {
			      float: left;
			      width: 49.95%;
			    }
			    .ui-block-b,
			    .ui-block-c {
			      float: left;
			      width: 24.925%;
			    }
			}
      div.ui-input-text {
        width: 200px !important
      }
		</style>
		<script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
		<script>
			$(document).bind('mobileinit',function(){
				$.mobile.pushStateEnabled = false;
				$.mobile.loader.prototype.options.text = "loading";
				$.mobile.loader.prototype.options.textVisible = true;
				$.mobile.loader.prototype.options.theme = "a";
				$.mobile.loader.prototype.options.textonly = false;
				$.mobile.loader.prototype.options.html = "<span class='ui-bar ui-overlay-c ui-corner-all'><img src='aloader.gif' /><h2>loading</h2></span>";
			});
		</script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <script src="https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.8/excanvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.8/jquery.jqplot.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.8/plugins/jqplot.mobile.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.8/plugins/jqplot.dateAxisRenderer.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/clockpicker/0.0.7/jquery-clockpicker.min.js"></script>
		<script type="text/javascript">
			/* store empty array or array of original data to plot on page load */

			var webSockets = {};
			var nodes = {};
			var connected = {};
			var things = {};
			var recipes = {};
			var watts = {};
			var currentNode = 0;
			var currentWSH = '';
      var firstTime = true;
      var firstNode = true;
      var relation = ["equal to", "not equal to", "bigger than", "smaller than", "not bigger than", "not smaller than"],output_rel = [];
      var on_off = ["turn OFF", "turn ON"],output_on_off = [];
      var on_off_select = ["OFF", "ON"],output_on_off_select = [];
      var output_things = [];
      var output_switches = [];
      var nextRecipeId = 0;

			function isEmpty(map) {
			   for(var key in map) {
				  if (map.hasOwnProperty(key)) {
					 return false;
				  }
			   }
			   return true;
			}
			// Listen for any attempts to call changePage().
			$(document).bind( "pagebeforechange", function( e, data ) {
				if ( typeof data.toPage === "string" ) {
					var u = $.mobile.path.parseUrl( data.toPage ),
						re = /^#thing_items/;
					if ( u.hash.search(re) !== -1 ) {
						showThing( u, data.options );
						e.preventDefault();
					}
					u = $.mobile.path.parseUrl( data.toPage ),
						re = /^#nodes/;
					if ( u.hash.search(re) !== -1 ) {
						showNodes( u, data.options );
						e.preventDefault();
					}
					u = $.mobile.path.parseUrl( data.toPage ),
						re = /^#index/;
					if ( u.hash.search(re) !== -1 ) {
						showIndex( u, data.options );
						e.preventDefault();
					}
				}
			});

			$(document).ready(function() {
        startWebsocket(window.location.hostname);
				//startWebsocket("10.0.0.108");
        for(var i = 0, len = relation.length; i < len; i++){
          //instead of appending each `<option>` element, it is a better practice to either concoct a string of all the HTML or create an array that will later be turned into a string (here we are pushing new indexes onto an `output` array)
          output_rel.push('<option value="' + i +'">' + relation[i] + '</option>');
        }
        for(var i = 0, len = on_off.length; i < len; i++){
          //instead of appending each `<option>` element, it is a better practice to either concoct a string of all the HTML or create an array that will later be turned into a string (here we are pushing new indexes onto an `output` array)
          output_on_off.push('<option value="' + i +'">' + on_off[i] + '</option>');
        }
        for(var i = 0, len = on_off_select.length; i < len; i++){
          //instead of appending each `<option>` element, it is a better practice to either concoct a string of all the HTML or create an array that will later be turned into a string (here we are pushing new indexes onto an `output` array)
          output_on_off_select.push('<option value="' + i +'">' + on_off_select[i] + '</option>');
        }

        $('.sortable-list').sortable({
          connectWith: '.sortable-list',
          dropOnEmpty: true,
          stop: function(event, ui) {
              window.console.log("New position: " + ui.item.index());
          }
        });
      });

			function debug(str) {
				$("#debug").html("<p>"+str+"<p>");
			}

			function startWebsocket(websockethost){
				try {
					if(!(websockethost in webSockets)){
						//currentWSH = websockethost;
						window.console.log("Setting up socket");
						ws = new WebSocket("ws://" + websockethost + ":81");
						webSockets[websockethost] = ws;
						connected[websockethost] = false;
						ws.onmessage = function(evt) {
							//window.console.log(evt.data);
							var obj = jQuery.parseJSON( evt.data );
							if(obj.command == "response_things"){
								$.each(obj.things, function(idx, thing){
									window.console.log(thing);
									if(!(obj.nodeId+"_"+thing['id'] in things)){
										things[obj.nodeId+"_"+thing['id']] = thing;
                    output_things.push('<option value="' + obj.nodeId+"_"+thing['id'] +'">' + thing['name'] + '</option>');
                    if(thing['type'] == 1) output_switches.push('<option value="' + thing['id'] +'">' + thing['name'] + '</option>');
									} else things[obj.nodeId+"_"+thing['id']] = thing;
								});
							} else if(obj.command == "response_nodes"){
								$.each(obj.nodes, function(idx, node){
									window.console.log(node);
									if(!(node['id'] in nodes) && node['id']!=0){
										nodes[node['id']] = node;
										window.console.log("added to nodes");
                    var content = "<li><a href=\"http://" + node['ip'] + "/#index\">" + node['name'] + "</a></li>";
                    $("#nodeLinkList").append( content ).trigger("create");
                    sendCommand(websockethost, "request_things");
										if(!(node['ip'] in webSockets)) setTimeout(function(){startWebsocket(node['ip'])}, 200);
									} else nodes[node['id']] = node;
                  if(firstNode) {
                    currentNode = obj.nodeId;
                    firstNode = false;
                  }
								});
							} else if(obj.command == "response_recipes"){
								$.each(obj.recipes, function(idx, recipe){
									window.console.log(recipe);
  								if(!(obj.nodeId+"_"+recipe['id'] in recipes)){
                    nextRecipeId = recipe['id'];
                    recipes[obj.nodeId+"_"+recipe['id']] = recipe;
                    var sourceThing = things[obj.nodeId+"_"+recipe['sourceThingId']];
                    var localThing = things[obj.nodeId+"_"+recipe['localThingId']];
                    var things_select = "<select id=\""+obj.nodeId+"_"+recipe['id']+"_thing\" data-native-menu=\"false\" data-inline=\"true\">"
                                        + output_things.join('') + "</select>";
                    var switch_select = "<select id=\""+obj.nodeId+"_"+recipe['id']+"_switch\" data-native-menu=\"false\" data-inline=\"true\">"
                                        + output_switches.join('') + "</select>";
                    var realtion_select = "<select id=\""+obj.nodeId+"_"+recipe['id']+"_realtion\" data-native-menu=\"false\" data-inline=\"true\">"
                                        + output_rel.join('') + "</select>";
                    var on_off_select = "<select id=\""+obj.nodeId+"_"+recipe['id']+"_on_off\" data-native-menu=\"false\" data-inline=\"true\">"
                                        + output_on_off.join('') + "</select>";
                    var recipe_name = "<input type=\"text\" id=\""+obj.nodeId+"_"+recipe['id']+"_name\" pattern=\"[0-9]*\" value=\""
                                        +recipe['name']+"\"  data-inline=\"true\"/>";

                    // var content = "<div data-role='collapsible' id='set" + obj.nodeId+"_"+recipe['id'] + "'><h3>"
                    //               + recipe['name'] + "</h3><div class=\"ui-field-contain\" data-type=\"horizontal\">"+recipe_name+"If the " + things_select
                    //               +"is "+realtion_select+" <div id='"+obj.nodeId+"_"+recipe['id']+"_value_select'></div>then "+on_off_select+" the "
                    //               +switch_select+"</div></div>";
                    var content = "<li data-role='collapsible' id='set" + obj.nodeId+"_"+recipe['id'] + "'><h3 class='droppable' >"
                                  + recipe['name'] + "</h3><div class=\"ui-field-contain\" data-type=\"horizontal\">"+recipe_name+"If the " + things_select
                                  +"is "+realtion_select+" <div id='"+obj.nodeId+"_"+recipe['id']+"_value_select'></div>then "+on_off_select+" the "
                                  +switch_select+"</div></li>";
    						    $("#recipes-set").append( content ).trigger("create");
                    $("#"+obj.nodeId+"_"+recipe['id']+"_thing option[value='"+recipe['sourceNodeId']+"_"+sourceThing.id+"']").attr('selected', 'selected');
                    $('#'+obj.nodeId+"_"+recipe['id']+'_thing').selectmenu('refresh');
                    $("#"+obj.nodeId+"_"+recipe['id']+"_switch option[value='"+localThing.id+"']").attr('selected', 'selected');
                    $('#'+obj.nodeId+"_"+recipe['id']+'_switch').selectmenu('refresh');
                    $("#"+obj.nodeId+"_"+recipe['id']+"_realtion option[value='"+recipe['relation']+"']").attr('selected', 'selected');
                    $('#'+obj.nodeId+"_"+recipe['id']+'_realtion').selectmenu('refresh');
                    $("#"+obj.nodeId+"_"+recipe['id']+"_on_off option[value='"+parseFloat(recipe['localValue'])+"']").attr('selected', 'selected');
                    $('#'+obj.nodeId+"_"+recipe['id']+'_on_off').selectmenu('refresh');
                    createRecipeValueSelect(obj.nodeId+"_"+recipe['id'], sourceThing.type, parseFloat(recipe['targetValue']));
                    $('#'+obj.nodeId+"_"+recipe['id']+'_thing').bind( "change", function(event, ui) {
                      createRecipeValueSelect(obj.nodeId+"_"+recipe['id'], things[$(this).val()].type, parseFloat(recipe['targetValue']));
                    });
                    $("#set" + obj.nodeId+"_"+recipe['id']).on( "collapsibleexpand ", function () {
    									//sendCommand(item['nodeName'] + ".local", "request_things");
                    });
                  } else recipes[obj.nodeId+"_"+recipe['id']] = recipe;
								});
							} else if(obj.command == "thing_update"){
                //window.console.log(obj);
                things[obj.nodeId+"_"+obj.thingId].name = obj.thingName;
                things[obj.nodeId+"_"+obj.thingId].type = obj.thingType;
                things[obj.nodeId+"_"+obj.thingId].override = obj.override;
                things[obj.nodeId+"_"+obj.thingId].last_updated = obj.lastUpdate;
                things[obj.nodeId+"_"+obj.thingId].value = obj.value;
                switch(obj.thingId){
                  case 1: {
                            $("#plug").text(obj.thingName + " is " + on_off_select[Math.floor(obj.value)]);
                            if($("#flip-plug-sw").val() != on_off_select[Math.floor(obj.value)]) {
                              //window.console.log($("#flip-plug-sw").val() + " : " + on_off_select[obj.value]);
                              $("#flip-plug-sw").val(on_off_select[Math.floor(obj.value)]).slider('refresh');
                            }
                            if($("#flip-ovrd-sw").val() != on_off_select[Math.floor(obj.override)]) {
                              //window.console.log($("#flip-ovrd-sw").val() + " : " + on_off_select[Math.floor(obj.override)]);
                              $("#flip-ovrd-sw").val(on_off_select[Math.floor(obj.override)]).slider('refresh');
                            }
                          }
                          break;
                  case 2: {
                            doUpdate(parseFloat(obj.value));
                            $("#watts").text(obj.thingName + ": " + obj.value);
                            var d = new Date("January 1, 2000 00:00:00");
                            d.setUTCSeconds(d.getUTCSeconds() + obj.lastUpdate);
          									$("#lastupdate-index").html(d.toLocaleString());
                          }
                          break;
                  case 3: {
                            $("#daily-kwh").text(obj.thingName + ": " + obj.value);
                          }
                          break;
                }
							}
						};
						ws.onerror = function(evt) {
							window.console.log(evt.data);
							$("#msg").html("<p> ERROR: "+evt.data+"</br>Retrying! <p>");
						};
						ws.onclose = function() {
							window.console.log("onclose called... reopening");
							debug("socket closed... reopening");
							connected[websockethost] = false;
							setTimeout(function(){startWebsocket(websockethost)}, 2000);
						};
						ws.onopen = function() {
							window.console.log("onopen called");
							debug("connected...");
							connected[websockethost] = true;
							sendCommand(websockethost, "request_nodes");
              if(firstTime) {
                currentWSH = websockethost;
                firstTime = false;
              }
						};
					} else {
						delete webSockets[websockethost];
						setTimeout(function(){startWebsocket(websockethost)}, 200);
					}
                } catch(exception) {
                    window.console.log('<p>Error'+exception);
                }
			}

      $(document).off('click',"#recipe_add").on('click',"#recipe_add", function(){
        addRecipe();
      });

      function createRecipeValueSelect(recipeId, thingType, defaultValue){
        switch(thingType) {
            case 1:
                var on_off_value_select = "<select id=\""+recipeId+"_value\" data-native-menu=\"false\" data-inline=\"true\">"
                                    + output_on_off_select.join('') + "</select>";
                $('#'+recipeId+'_value_select').html(on_off_value_select);
                $('#'+recipeId+'_value_select').trigger("create");
                $("#"+recipeId+"_value_select option[value='"+parseFloat(defaultValue)+"']").attr('selected', 'selected');
                $('#'+recipeId+'_value').selectmenu('refresh');
                break;
            case 7:
                var clock_input = "<input id=\""+recipeId+"_value\" value=\""+Math.floor(defaultValue/3600)+":"+Math.floor((defaultValue%3600)/60)+"\"/>";
                $('#'+recipeId+'_value_select').html(clock_input);
                $('#'+recipeId+'_value_select').trigger("create");
                $('#'+recipeId+'_value').clockpicker({
                                                        placement: 'bottom', // clock popover placement
                                                        default: Math.floor(defaultValue/3600)+":"+Math.floor((defaultValue%3600)/60),
                                                        align: 'left',       // popover arrow align
                                                        autoclose: true,    // auto close when minute is selected
                                                        vibrate: true        // vibrate the device when dragging clock hand
                                                    });
                break;
            default:
                var value_select = "<input type=\"number\" id=\""+recipeId+"_value\" pattern=\"[0-9]*\" value=\""
                                    +defaultValue+"\"  data-inline=\"true\" max=\"999999\"/>";
                $('#'+recipeId+'_value_select').html(value_select);
                $('#'+recipeId+'_value_select').trigger("create");
        }
      }

      function addRecipe() {
        window.console.log('recipe add');
        nextRecipeId++;
        var newRecipe = {};
        newRecipe.id = nextRecipeId;
        newRecipe.name = "New Recipe";
        newRecipe.sourceNodeId = currentNode;
        newRecipe.sourceThingId = 1;
        newRecipe.sourceValue = 0;
        newRecipe.relation = 0;
        newRecipe.localThingId = 1;
        newRecipe.targetValue = 0;
        newRecipe.localValue = 0;
        newRecipe.last_updated = 0;

        recipes[currentNode+"_"+newRecipe.id] = newRecipe;
        var sourceThing = things[currentNode+"_"+newRecipe['sourceThingId']];
        var localThing = things[currentNode+"_"+newRecipe['localThingId']];
        var things_select = "<select id=\""+currentNode+"_"+newRecipe['id']+"_thing\" data-native-menu=\"false\" data-inline=\"true\">"
                            + output_things.join('') + "</select>";
        var switch_select = "<select id=\""+currentNode+"_"+newRecipe['id']+"_switch\" data-native-menu=\"false\" data-inline=\"true\">"
                            + output_switches.join('') + "</select>";
        var realtion_select = "<select id=\""+currentNode+"_"+newRecipe['id']+"_realtion\" data-native-menu=\"false\" data-inline=\"true\">"
                            + output_rel.join('') + "</select>";
        var on_off_select = "<select id=\""+currentNode+"_"+newRecipe['id']+"_on_off\" data-native-menu=\"false\" data-inline=\"true\">"
                            + output_on_off.join('') + "</select>";
        var value_select = "<input type=\"number\" id=\""+currentNode+"_"+newRecipe['id']+"_value\" pattern=\"[0-9]*\" value=\""
                            +newRecipe['targetValue']+"\"  data-inline=\"true\" max=\"999999\"/>";
        var recipe_name = "<input type=\"text\" id=\""+currentNode+"_"+newRecipe['id']+"_name\" pattern=\"[0-9]*\" value=\""
                            +newRecipe['name']+"\"  data-inline=\"true\"/>";

        var content = "<div data-role='collapsible' id='set" + currentNode+"_"+newRecipe['id'] + "'><h3>"
                      + newRecipe['name'] + "</h3><div class=\"ui-field-contain\" data-type=\"horizontal\">"+recipe_name+"If the " + things_select
                      +"is "+realtion_select+" <div id='"+currentNode+"_"+newRecipe['id']+"_value_select'></div>then "+on_off_select+" the "
                      +switch_select+"</div></div>";
        $( "#recipes-set" ).append( content ).collapsibleset( "refresh" );
        createRecipeValueSelect(currentNode+"_"+newRecipe['id'], sourceThing.type, parseFloat(newRecipe['targetValue']));
        $("#set" + currentNode+"_"+newRecipe['id']).trigger('create');
        $('#'+currentNode+"_"+newRecipe['id']+'_thing').bind( "change", function(event, ui) {
          createRecipeValueSelect(currentNode+"_"+newRecipe['id'], things[$(this).val()].type, parseFloat(newRecipe['targetValue']));
        });
      }

      $(document).off('click',"#recipe_save").on('click',"#recipe_save", function(){
        saveRecipes();
      });

      function saveRecipes(){
        var jRecipes = [];
        $.each(recipes, function(idx, oRecipe){
          var prefix = "#"+currentNode+"_"+oRecipe.id;
          oRecipe.id = $("#set"+currentNode+"_"+oRecipe.id).index() + 1;
          oRecipe.name = $(prefix+"_name").val();
          oRecipe.sourceNodeId = $(prefix+"_thing").val().split("_")[0];
          oRecipe.sourceThingId = $(prefix+"_thing").val().split("_")[1];
          oRecipe.relation = $(prefix+"_realtion").val();
          oRecipe.localThingId = $(prefix+"_switch").val();
          var targetValue = $(prefix+"_value").val();
          if(targetValue.indexOf(":") != -1) targetValue = targetValue.split(":")[0]*3600 + targetValue.split(":")[1]*60;
          oRecipe.targetValue = targetValue;
          oRecipe.localValue = $(prefix+"_on_off").val();
          oRecipe.last_updated = new Date() - Date.parse("01 01 2000");
          jRecipes.push(oRecipe);
        });
        jRecipes.sort(function(a,b) {return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);} );
        var jObj = {
          command : 'save_recipes',
          recipes : jRecipes
        }
        sendObject(currentWSH, jObj);
        //window.console.log(jObj);
      }

			function sendCommand(websockethost, command) {
        if(connected[websockethost]) {
					window.console.log("sending " + command);
					var sendObj = {
						'command' : command
					};
          window.console.log("sending "+command+" to " + websockethost);
          webSockets[websockethost].send(JSON.stringify(sendObj));
				} else {
					setTimeout(function(){sendCommand(websockethost, "request_things")}, 200);
				}
      };

			function sendObject(websockethost, sendObj) {
          if(connected[websockethost]) {
  					var jsonStr = JSON.stringify(sendObj);
  					//window.console.log("sending "+jsonStr+" to " + websockethost);
  					webSockets[websockethost].send(jsonStr);
  				} else {
  					setTimeout(function(){sendCommand(websockethost, "request_things")}, 200);
  				}
      };

			function showThing( urlObj, options ){
				var pageSelector = urlObj.hash.replace( /\?.*$/, "" );
				window.console.log(pageSelector);
				sendCommand(currentWSH, "request_recipes");
				window.console.log(pageSelector);
				showPage( pageSelector, urlObj, options );
			}

			function showNodes( urlObj, options ){
				var pageSelector = urlObj.hash.replace( /\?.*$/, "" );
				window.console.log(pageSelector);
				showPage( pageSelector, urlObj, options );
			}

			function showIndex( urlObj, options ){
				var pageSelector = urlObj.hash.replace( /\?.*$/, "" );
				window.console.log(pageSelector);
        showPage( pageSelector, urlObj, options );
			}

			function showPage( pageSelector, urlObj, options ){
				var $page = $( pageSelector );
				options.dataUrl = urlObj.href;
				$page.page();
				$.mobile.changePage( $page, options );
			}


		</script>
    </head>
    <body id="nodeList">
		<div data-role="page" id="index" class="ui-responsive-panel">
      <div data-role="panel" data-display="overlay" data-position="left" data-position-fixed="false" id="nav-panel-index" data-theme="a">
				<ul data-role="listview" data-theme="a" data-divider-theme="a" style="margin-top:-16px;" class="nav-search">
					<li data-icon="delete" style="background-color:#111;">
						<a href="#" data-rel="close">Close menu</a>
					</li>
          <li data-filtertext="wai-aria voiceover accessibility screen reader">
						<a href="#thing_items" >Recipes</a>
					</li>
					<li data-filtertext="wai-aria voiceover accessibility screen reader">
						<a href="#nodes">Nodes</a>
					</li>
				</ul>
			</div><!-- /panel -->
			<div data-theme="a" data-role="header" data-position="fixed">
				<h3>
					Current Watts
				</h3>
				<a href="#nav-panel-index" data-icon="bars" data-iconpos="notext">Menu</a>
			</div>
			<div data-role="content">
				<div id="chart1" style="height: 40%; width: 100%; position: relative;"></div>
				</br>
				<label id="plug">Plug</label>
        <label id="watts">Watts</label>
				<label id="daily-kwh">Daily Watts/hour</label>
				<div class="ui-block-a">
			     <div class="ui-body">
			        <div id="override-sw" class="override-sw">
    					  <select name="flip-ovrd-sw" id="flip-ovrd-sw" data-role="slider">
                   <option value="OFF">Override Off</option>
                   <option value="ON">Override On</option>
    		        </select>
						  </div>
			    </div>
			  </div>
				<div class="ui-block-b">
			    <div class="ui-body">
			      <div id="smart-plug-sw" class="smart-plug-sw">
							<select name="flip-plug-sw" id="flip-plug-sw" data-role="slider">
								<option value="OFF">Plug Off</option>
								<option value="ON">Plug On</option>
							</select>
						</div>
			    </div>
			  </div>
			</div>
			<div data-role="footer" id="statusbar" data-position="fixed">
				<h4>Last Update: <span id="lastupdate-index"></span></h4>
			</div>
		</div>
		<div data-role="page" id="nodes" class="ui-responsive-panel">
      <div data-role="panel" data-display="overlay" data-position="left" data-position-fixed="false" id="nav-panel-nodes" data-theme="a">
				<ul data-role="listview" data-theme="a" data-divider-theme="a" style="margin-top:-16px;" class="nav-search">
					<li data-icon="delete" style="background-color:#111;">
						<a href="#" data-rel="close">Close menu</a>
					</li>
          <li data-filtertext="wai-aria voiceover accessibility screen reader">
						<a href="#index" >Main</a>
					</li>
					<li data-filtertext="wai-aria voiceover accessibility screen reader">
						<a href="#thing_items">Recipes</a>
					</li>
				</ul>
			</div><!-- /panel -->
			<div data-theme="a" data-role="header" data-position="fixed">
				<h3>
					Nodes
				</h3>
				<a href="#nav-panel-nodes" data-icon="bars" data-iconpos="notext">Menu</a>
			</div>
			<ul data-role="listview" id="nodeLinkList">
      </ul>
      <div data-role="footer" id="statusbar" data-position="fixed">
				<h4>Last Update: <span id="lastupdate-index"></span></h4>
			</div>
		</div>
		<div data-role="page" id="thing_items" class="ui-responsive-panel">
      <div data-role="panel" data-display="overlay" data-position="left" data-position-fixed="false" id="nav-panel-settings" data-theme="a">
				<ul data-role="listview" data-theme="a" data-divider-theme="a" style="margin-top:-16px;" class="nav-search">
					<li data-icon="delete" style="background-color:#111;">
						<a href="#" data-rel="close">Close menu</a>
					</li>
          <li data-filtertext="wai-aria voiceover accessibility screen reader">
						<a href="#index" >Main</a>
					</li>
          <li data-filtertext="wai-aria voiceover accessibility screen reader">
						<a href="#nodes">Nodes</a>
					</li>
				</ul>
			</div><!-- /panel -->
			<div data-theme="a" data-role="header" data-position="fixed">
				<h3>
					Recipes
				</h3>
        <a href="#nav-panel-settings" data-icon="bars" data-iconpos="notext">Menu</a>
			</div>
			<div data-role="content">
        <div class="ui-block-a">
			     <div class="ui-body">
              <button type="button" data-icon="plus" data-iconpos="right" data-mini="true" data-inline="true" id="recipe_add">Add</button>
              <button type="button" data-icon="check" data-iconpos="right" data-mini="true" data-inline="true" id="recipe_save">Save</button>
          </div>
        </div>
        <div class="ui-block-a">
			     <div class="ui-body">
            <ul data-role="listview" class="sortable-list" id="recipes-set"></ul>
          </div>
        </div>
  		</div>
      <div data-role="footer" id="statusbar" data-position="fixed">
        <h4> </h4>
      </div>
    </body>
<script>
$("#flip-ovrd-sw").change(function () {
  sVal = $(this).val();
  if (currentNode != 0) {
    var oThing = things[currentNode + '_1'];
    oThing.override = (sVal=='ON')?true:false;
    //window.console.log("overide switch");
    things[currentNode + '_1'] = oThing;
    var jObj = {
      command : 'save_thing',
      thing : oThing
    }
    //window.console.log(currentWSH);
    sendObject(currentWSH, jObj);
  }
});

$("#flip-plug-sw").change(function () {
  sVal = $(this).val();
  if (currentNode != 0) {
    var oThing = things[currentNode + '_1'];
    oThing.value = (sVal =='ON')?1:0;
    //window.console.log("plug switch");
    things[currentNode + '_1'] = oThing;
    if($("#flip-ovrd-sw").val() != 'ON'){
      sendCommand(currentWSH, 'temp_override');
    }
    var jObj = {
      command : 'save_thing',
      thing : oThing
    }
    sendObject(currentWSH, jObj);
    //window.console.log(currentWSH);
  }
});

var storedData = [];
var n = 120;
var x = (new Date()).getTime(); // current time
/* initialize plot*/
for(i=0; i<n; i++){
  storedData.push([x - (n-1-i)*2000,0]);
}
var options = {
  axes: {
	 xaxis: {
		numberTicks: 6,
		renderer:$.jqplot.DateAxisRenderer,
		tickOptions:{formatString:'%H:%M:%S'},
		min : storedData[0][0],
		max: storedData[storedData.length-1][0]
	 },
	 yaxis: {
		min:0,
		numberTicks: 6,
		tickOptions:{formatString:'%.1f'}
	 }
  },
  seriesDefaults: {
	 rendererOptions: { smooth: true},
	 showMarker:  false
  }
};

var plot1 = $.jqplot ('chart1', [storedData],options);

function doUpdate(value) {
    var newVal = new Number(value)/1000; /* update storedData array*/
	//storedData.push(newVal);
	//renderGraph();
	if(storedData.length > n-1){
		 storedData.shift();
	}
	var x = (new Date()).getTime();
	storedData.push([x,newVal]);
	if (plot1) {
		plot1.destroy();
	}
	plot1.series[0].data = storedData;
	options.axes.xaxis.min = storedData[0][0];
	options.axes.xaxis.max = storedData[storedData.length-1][0];
	plot1 = $.jqplot ('chart1', [storedData],options);
}

function doBlankUpdate() {
	if (plot1) {
		plot1.destroy();
	}
	plot1.series[0].data = storedData;
	options.axes.xaxis.min = storedData[0][0];
	options.axes.xaxis.max = storedData[storedData.length-1][0];
	plot1 = $.jqplot ('chart1', [storedData],options);
}
</script>
</html>
